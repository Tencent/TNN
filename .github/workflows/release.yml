name: Release

on:
  push:
    tags:
      - '*'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: Get-version
      id: get_version
      run: |
        echo "github ref:" ${GITHUB_REF}
        echo "tag version:" ${GITHUB_REF/refs\/tags\//}
        echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  full-source:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      ASSET_NAME: tnn-${{ needs.setup.outputs.VERSION }}-full-source
    outputs:
      ASSET_NAME: ${{ env.ASSET_NAME }}
    steps:
      - uses: actions/checkout@v2
      - name: Compress
        env:
          ASSET_PATH: /tmp/${{ env.ASSET_NAME }}.zip
        run: |
          echo "compress to" ${ASSET_PATH}
          rm -rf .git
          rm -f ${ASSET_PATH}
          zip -9r ${ASSET_PATH} .
      - name: Upload_asset
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ASSET_NAME }}
          path: /tmp/${{ env.ASSET_NAME }}.zip
          if-no-files-found: error

  android:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      ASSET_NAME: tnn-${{ needs.setup.outputs.VERSION }}-android
    outputs:
      ASSET_NAME: ${{ env.ASSET_NAME }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure
        run: sudo apt-get install attr
      - name: Build
        env:
            ASSET_PATH: /tmp/${{ env.ASSET_NAME }}.zip
        run: |
          cd ./scripts
          export ANDROID_NDK=$ANDROID_HOME/ndk-bundle && ./build_android.sh
          cd ./release
          zip -9r ${ASSET_PATH} .
      - name: Upload_asset
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ASSET_NAME }}
          path: /tmp/${{ env.ASSET_NAME }}.zip
          if-no-files-found: error

  ios:
    needs: [setup]
    runs-on: macos-latest
    env:
      ASSET_NAME: tnn-${{ needs.setup.outputs.VERSION }}-ios
    outputs:
      ASSET_NAME: ${{ env.ASSET_NAME }}
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          ./scripts/build_ios.sh
          cd ./platforms/ios
          zip -9r ${{ env.ASSET_NAME }}.zip ./tnn.bundle ./tnn.framework
      - name: Upload_asset
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ASSET_NAME }}
          path: ./platforms/ios/${{ env.ASSET_NAME }}.zip
          if-no-files-found: error

  release:
    needs: [setup, full-source, android, ios]
    runs-on: ubuntu-latest
    env:
      ARTIFACTS_PATH: artifacts
    steps:
    - name: Download
      id: download_artifacts
      uses: actions/download-artifact@v2
      with:
        path: ${{ env.ARTIFACTS_PATH }}
    - name: Create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: TNN ${{ needs.setup.outputs.VERSION }}
        draft: true
        prerelease: false
    - name: Upload-full-source
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ASSET_NAME: ${{ needs.full-source.outputs.ASSET_NAME }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARTIFACTS_PATH }}/${{ env.ASSET_NAME }}/${{ env.ASSET_NAME }}.zip
        asset_name: ${{ env.ASSET_NAME }}.zip
        asset_content_type: application/zip
    - name: Upload-android
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ASSET_NAME: ${{ needs.android.outputs.ASSET_NAME }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARTIFACTS_PATH }}/${{ env.ASSET_NAME }}/${{ env.ASSET_NAME }}.zip
        asset_name: ${{ env.ASSET_NAME }}.zip
        asset_content_type: application/zip
    - name: Upload-ios
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ASSET_NAME: ${{ needs.ios.outputs.ASSET_NAME }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARTIFACTS_PATH }}/${{ env.ASSET_NAME }}/${{ env.ASSET_NAME }}.zip
        asset_name: ${{ env.ASSET_NAME }}.zip
        asset_content_type: application/zip
