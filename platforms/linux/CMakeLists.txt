if(DEBUG)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
endif()


include_directories(${CMAKE_CURRENT_SOURCE_DIR}/source/tnn/device/opencl)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/opencl/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/stb)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/platforms/android/src)

set(COMMON_SRC ${CMAKE_CURRENT_SOURCE_DIR}/platforms/android/src/test_common.cc)

if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm" AND ANDROID_API_LEVAL)
    target_link_libraries(TNN dl log)
else()
    target_link_libraries(TNN dl rt)
endif()

if(TNN_X86_ENABLE)
endif()

if(TNN_OPENVINO_ENABLE)

    if(NOT DEFINED ENV{OPENVINO_ROOT_DIR})
        message(FATAL_ERROR "not defined environment variable:OPENVINO_ROOT_DIR")
    endif()

    if (TNN_OPENVINO_BUILD_SHARED)
        set(LINK_TYPE "SHARED")
        set(LIB_EXT ".so")
    else()
        set(LINK_TYPE "STATIC")
        set(LIB_EXT ".a")
    endif()

    add_library(openvino ${LINK_TYPE} IMPORTED)
    add_library(tbb ${LINK_TYPE} IMPORTED)

    set_target_properties(openvino PROPERTIES IMPORTED_LOCATION $ENV{OPENVINO_ROOT_DIR}/runtime/lib/intel64/${LIB_PFX}openvino${LIB_EXT})
    set_target_properties(tbb PROPERTIES IMPORTED_LOCATION $ENV{OPENVINO_ROOT_DIR}/runtime/3rdparty/tbb/lib/libtbb.so)
 
    target_link_libraries(TNN openvino tbb)
endif()

if(TNN_CUDA_ENABLE)
    enable_language(CUDA)
    include_directories(${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
    add_library(nvinfer SHARED IMPORTED)
    add_library(nvinfer_plugin SHARED IMPORTED)
    add_library(cudnn SHARED IMPORTED)
    set_target_properties(nvinfer PROPERTIES IMPORTED_LOCATION $ENV{TENSORRT_ROOT_DIR}/lib/libnvinfer.so)
    set_target_properties(nvinfer_plugin PROPERTIES IMPORTED_LOCATION $ENV{TENSORRT_ROOT_DIR}/lib/libnvinfer_plugin.so)
    set_target_properties(cudnn PROPERTIES IMPORTED_LOCATION $ENV{CUDNN_ROOT_DIR}/lib64/libcudnn.so)
    target_link_libraries(TNN nvinfer nvinfer_plugin cudnn)
    target_link_options(TNN PRIVATE "LINKER:--no-as-needed")
    target_link_options(TNN PRIVATE "LINKER:-lcublas,-lcublasLt")
endif()

if (TNN_TNNTORCH_ENABLE)
    find_package(Torch REQUIRED)
    target_link_libraries(TNN ${TORCH_LIBRARIES})
    if(TNN_TORCHVISION_ENABLE)
        find_package(TorchVision REQUIRED)
        target_link_libraries(TNN TorchVision::TorchVision)
    endif()
endif()

if(TNN_ATLAS_ENABLE)
    target_link_libraries(TNN ascendcl acl_dvpp)
    if(LINUX_TEST_ENABLE)
        add_executable(AtlasTest ${COMMON_SRC} ${CMAKE_SOURCE_DIR}/platforms/linux/src/test_atlas.cc)
        target_link_libraries(AtlasTest TNN)
        add_executable(AtlasTestImageList ${COMMON_SRC} ${CMAKE_SOURCE_DIR}/platforms/linux/src/test_atlas_image_list.cc)
        target_link_libraries(AtlasTestImageList TNN)
        add_executable(AtlasTestMultiThread ${COMMON_SRC} ${CMAKE_SOURCE_DIR}/platforms/linux/src/test_atlas_multi_thread.cc)
        target_link_libraries(AtlasTestMultiThread TNN)
        add_executable(ArmTestMultiThread ${COMMON_SRC} ${CMAKE_SOURCE_DIR}/platforms/linux/src/test_arm_multi_thread.cc)
        target_link_libraries(ArmTestMultiThread TNN)
        add_executable(AtlasTestMultiModel ${COMMON_SRC} ${CMAKE_SOURCE_DIR}/platforms/linux/src/test_atlas_multi_model.cc)
        target_link_libraries(AtlasTestMultiModel TNN)
        add_executable(AtlasTestResizeCrop ${COMMON_SRC} ${CMAKE_SOURCE_DIR}/platforms/linux/src/test_atlas_resize_crop.cc)
        target_link_libraries(AtlasTestResizeCrop TNN)
    endif()
endif()
if(TNN_RK_NPU_ENABLE)
    message(STATUS "Build TNN RKNPU")
    target_link_libraries(TNN rknpu_ddk)
endif()

if (TNN_ZIXIAO_ENABLE)
    message(STATUS "Build TNN ZIXIAO")
    add_library(light_runtime_core SHARED IMPORTED)
    set_target_properties(light_runtime_core PROPERTIES IMPORTED_LOCATION $ENV{LRT_ROOT_DIR}/lib/liblight_runtime_core.so)
    target_link_libraries(TNN light_runtime_core)
endif()
