// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TableInC, TableInCT } from '../namespace-c/table-in-c';


export class SecondTableInA {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SecondTableInA {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSecondTableInA(bb:flatbuffers.ByteBuffer, obj?:SecondTableInA):SecondTableInA {
  return (obj || new SecondTableInA()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSecondTableInA(bb:flatbuffers.ByteBuffer, obj?:SecondTableInA):SecondTableInA {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SecondTableInA()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

referToC(obj?:TableInC):TableInC|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TableInC()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static getFullyQualifiedName():string {
  return 'NamespaceA.SecondTableInA';
}

static startSecondTableInA(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addReferToC(builder:flatbuffers.Builder, referToCOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, referToCOffset, 0);
}

static endSecondTableInA(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSecondTableInA(builder:flatbuffers.Builder, referToCOffset:flatbuffers.Offset):flatbuffers.Offset {
  SecondTableInA.startSecondTableInA(builder);
  SecondTableInA.addReferToC(builder, referToCOffset);
  return SecondTableInA.endSecondTableInA(builder);
}

unpack(): SecondTableInAT {
  return new SecondTableInAT(
    (this.referToC() !== null ? this.referToC()!.unpack() : null)
  );
}


unpackTo(_o: SecondTableInAT): void {
  _o.referToC = (this.referToC() !== null ? this.referToC()!.unpack() : null);
}
}

export class SecondTableInAT {
constructor(
  public referToC: TableInCT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const referToC = (this.referToC !== null ? this.referToC!.pack(builder) : 0);

  return SecondTableInA.createSecondTableInA(builder,
    referToC
  );
}
}
