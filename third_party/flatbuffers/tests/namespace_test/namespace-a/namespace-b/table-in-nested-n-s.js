// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export class TableInNestedNS {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTableInNestedNS(bb, obj) {
        return (obj || new TableInNestedNS()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTableInNestedNS(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TableInNestedNS()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    foo() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    mutate_foo(value) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt32(this.bb_pos + offset, value);
        return true;
    }
    static getFullyQualifiedName() {
        return 'NamespaceA.NamespaceB.TableInNestedNS';
    }
    static startTableInNestedNS(builder) {
        builder.startObject(1);
    }
    static addFoo(builder, foo) {
        builder.addFieldInt32(0, foo, 0);
    }
    static endTableInNestedNS(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createTableInNestedNS(builder, foo) {
        TableInNestedNS.startTableInNestedNS(builder);
        TableInNestedNS.addFoo(builder, foo);
        return TableInNestedNS.endTableInNestedNS(builder);
    }
    unpack() {
        return new TableInNestedNST(this.foo());
    }
    unpackTo(_o) {
        _o.foo = this.foo();
    }
}
export class TableInNestedNST {
    constructor(foo = 0) {
        this.foo = foo;
    }
    pack(builder) {
        return TableInNestedNS.createTableInNestedNS(builder, this.foo);
    }
}
